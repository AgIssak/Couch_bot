import telebot
from telebot import types
import sqlite3
import os
import random
import time
import schedule


bot = telebot.TeleBot("6487829037:AAEjsPmRFt-h4bhkkP5JbxIzF1QJ99S0aqY")
bench = ""
upper_bench = ""
cross = ""
butterfly = ""
muscle_group = ("–ì—Ä—É–¥–∞–∫, –°–ø–∏–Ω–∞, –ù–æ–≥–∏, –†—É–∫–∏")

def reminder(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç–∏–∫ –∫–∞—á–∫–∞–∑–∞–≤—Ä!–•–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ, —á—Ç–æ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω—å–∫–∞:3)")
schedule.every().monday.at("00:07").do(reminder)
# while True:
#     schedule.run_pending()
#     time.sleep(1)

@bot.message_handler(commands = ["start"])
def main(message):
    bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}")
    video = open("mem/welcome.mp4", "rb")
    bot.send_video(message.chat.id, video, timeout=120)
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("Gym songs", url='https://t.me/gym_song_by_coach')
    button2 = types.InlineKeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å", callback_data="calories")
    button4 = types.InlineKeyboardButton("–ü–æ–¥–Ω—è—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é!", callback_data="motivation")
    button5 = types.InlineKeyboardButton("–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!", callback_data="get_pr")
    button6 = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö", callback_data="set_pr")
    markup.add(button1)
    markup.add(button2)
    markup.add(button5,button6)
    markup.add(button4)
    bot.send_message(message.chat.id, "–ô–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?".format(message.from_user), reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == "set_pr":
        bot.send_message(callback.message.chat.id,f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å Buddyboy? {muscle_group}\n")
    elif callback.data == "get_pr":
        conn = sqlite3.connect("pr_sql.db")
        cur = conn.cursor()

        cur.execute(f"SELECT * FROM chest")
        chest = cur.fetchall()

        info = ""
        for i in chest:
            info += f"–î–µ–Ω—å ‚Ññ{i[0]}, –ñ–∏–º –ª–µ–∂–∞: {i[1]} , –í–µ—Ä—Ö–Ω–∏–π –∂–∏–º: {i[2]} , –ö—Ä–æ—Å—Å: {i[3]} , –ë–∞–±–æ—á–∫–∞: {i[4]}\n"

        cur.close()
        conn.close()

        bot.send_message(callback.message.chat.id, "–©—è—è—è—Å, –¥–∞–π–∫—Å —á–µ–∫–Ω—É –∑–∞–ø–∏—Å–∏!")
        bot.send_message(callback.message.chat.id, info)
        bot.send_message(callback.message.chat.id, "–ù–∞–ø–∏—à–∏ /start –∏ —á–µ–∫–Ω–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–µ —É–º–µ—éüòè")
    elif callback.data == "motivation":
        bot.send_message(callback.message.chat.id, "–ú–∞–∞–∞–∞—Ç–∏–∏–∏–≤–∞–∞–∞—Ü–∏–∏—é –Ω–∞–∞–¥–∞–∞–∞ –ø–æ–¥–Ω—è—è—è—è—è—Ç—å)")
        photo = open("mem/m.png", "rb")
        bot.send_photo(callback.message.chat.id, photo)
        bot.send_message(callback.message.chat.id, "–ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É –Ω–∞–π–¥—É –≤–∏–¥–æ—Å –ø–æ–¥ —Ç–≤–æ—é –±–µ–∑–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ä–æ–∂—É")
        video = open("motivation/"+random.choice(os.listdir("motivation")), "rb")
        bot.send_video(callback.message.chat.id, video, timeout=120)
    elif callback.data =="calories":
        bot.send_message(callback.message.chat.id,"–ú–∞—Å–ª –º–æ–Ω—Å—Ç—Ä –Ω–∞–ø–æ–º–Ω–∏ —Å–≤–æ–π –ø–æ–ª?(–∏—Ö –¥–≤–∞ –∫—Å—Ç–∞—Ç–∏ –Ω–µ –Ω–∞–¥–æ –º–Ω–µ —Ç—É—Ç —á—É–¥–∏—Ç—å(P.S. –ü–∏—à–∏: –ú—É–∂—á–∏–Ω–∞ –∏–ª–∏ –ñ–µ–Ω—â–∏–Ω–∞))")

@bot.message_handler(content_types=["text"])
def calories(message):
    if message.text == "–ú—É–∂—á–∏–Ω–∞":
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç—ã —Ç–∞–º –≤–µ—Å–∏—à—å?")
        bot.register_next_step_handler(message, men_process_weight)
    elif message.text == "–ñ–µ–Ω—â–∏–Ω–∞":
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç—ã —Ç–∞–º –≤–µ—Å–∏—à—å?")
        bot.register_next_step_handler(message, women_process_weight)

    elif message.text == "–ì—Ä—É–¥–∞–∫":
        conn = sqlite3.connect("pr_sql.db")
        cur = conn.cursor()
        cur.execute(f"CREATE TABLE IF NOT EXISTS chest(days int auto_increment, bench int(4), upper int(4), cross int(4), butterfly int(4))")
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, "–ì—Ä—É–¥–Ω—ã–µ –∑–Ω–∞—á–∏—Ç —â—è –∑–∞–ø–∏—à–µ–º")
        bot.send_message(message.chat.id, "–°–∫–æ–∫ –∂–º–µ—à—å –≤ –∂–∏–º–µ? –•–æ—Ç—å 100-–∫–∞ –µ—Å—Ç—å?")
        bot.register_next_step_handler(message, process_bench)
    elif message.text == "–°–ø–∏–Ω–∞":
        bot.send_message(message.chat.id, "–°–æ—Ä—Ä–∏ –ø–æ–∫–∞ —á—Ç–æ –æ–Ω–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        sticker = open("mem/nan.webp","rb")
        bot.send_sticker(message.chat.id, sticker)
    elif message.text == "–ù–æ–≥–∏":
        bot.send_message(message.chat.id, "–°–æ—Ä—Ä–∏ –ø–æ–∫–∞ —á—Ç–æ –æ–Ω–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        sticker = open("mem/nan.webp","rb")
        bot.send_sticker(message.chat.id, sticker)
    elif message.text == "–†—É–∫–∏":
        bot.send_message(message.chat.id, "–°–æ—Ä—Ä–∏ –ø–æ–∫–∞ —á—Ç–æ –æ–Ω–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        sticker = open("mem/nan.webp","rb")
        bot.send_sticker(message.chat.id, sticker)
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ü—Ä–æ—á–∏—Ç–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –Ω–∏—Ñ–∏–≥–∞ –Ω–µ –ø–æ–Ω—è–ª –ø—Ä–æ—Å—Ç–æ –∂–º—è–Ω–∏ –Ω–∞ --> /start")
        sticker = open("mem/ag.webp","rb")
        bot.send_sticker(message.chat.id, sticker)
def men_process_weight(message):
    global men_weight
    men_weight = int(message.text.strip())
    bot.send_message(message.chat.id, "–ê —Ä–æ—Å—Ç –∫–∞–∫–æ–π?(P.S.–ü–∏—à–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö)")
    bot.register_next_step_handler(message, men_process_height)
def men_process_height(message):
    global men_height
    men_height = int(message.text.strip())
    bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏ –∞ —Å–∫–æ–∫ —Ç–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, men_process_age)
def men_process_age(message):
    global men_age
    men_age = int(message.text.strip())
    bot.send_message(message.chat.id, "–Ø –±—ã –¥–∞–ª –º–µ–Ω—å—à–µüòè. –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏?")
    bot.register_next_step_handler(message, men_process_exercise)
def men_process_exercise(message):
    info = 0
    exercise = int(message.text.strip())
    if exercise == "0":
        men_factor = 1.2
    elif exercise == "1" or "2" or "3":
        men_factor = 1.375
    elif exercise == "4" or "5":
        men_factor = 1.55
    elif exercise == "6" or "7":
        men_factor = 1.725
    else:
        men_factor = 1.9
    info = (88.362 + (13.397 * men_weight) + (4.799 * men_height) - (5.677 * men_age)) * men_factor
    bot.send_message(message.chat.id, f"{info} –∫–∫–∞–ª/–¥–µ–Ω—å –Ω–∞–¥–æ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /start –∏ —á–µ–∫–Ω–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–µ —É–º–µ—éüòè")

def women_process_weight(message):
    global women_weight
    women_weight = int(message.text.strip())
    bot.send_message(message.chat.id, "–ê —Ä–æ—Å—Ç –∫–∞–∫–æ–π?(P.S.–ü–∏—à–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö)")
    bot.register_next_step_handler(message, women_process_height)
def women_process_height(message):
    global women_height
    women_height = int(message.text.strip())
    bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏ –∞ —Å–∫–æ–∫ —Ç–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, women_process_age)
def women_process_age(message):
    global women_age
    women_age = int(message.text.strip())
    bot.send_message(message.chat.id, "–Ø –±—ã –¥–∞–ª –º–µ–Ω—å—à–µüòè. –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏?")
    bot.register_next_step_handler(message, women_process_exercise)
def women_process_exercise(message):
    info = 0
    exercise = int(message.text.strip())
    if exercise == "0":
        women_factor = 1.2
    elif exercise == "1" or "2" or "3":
        women_factor = 1.375
    elif exercise == "4" or "5":
        women_factor = 1.55
    elif exercise == "6" or "7":
        women_factor = 1.725
    else:
        women_factor = 1.9
    info = (447.593 + (9.247 * women_weight) + (3.098 * women_height) - (4.33 * women_age)) * women_factor
    # –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤–ø–∏—Ö–Ω—É—Ç—å int(info)
    bot.send_message(message.chat.id, f"{info} –∫–∫–∞–ª/–¥–µ–Ω—å –Ω–∞–¥–æ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /start –∏ —á–µ–∫–Ω–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–µ —É–º–µ—éüòè")



        

# @bot.message_handler(content_types=["text"])
# def chest(message):
    #  if message.text == "–ì—Ä—É–¥–∞–∫":
    #     conn = sqlite3.connect("pr_sql.db")
    #     cur = conn.cursor()
    #     cur.execute("CREATE TABLE IF NOT EXISTS chest(days int auto_increment primary key, bench int(4), upper int(4), cross int(4), butterfly int(4))")
    #     conn.commit()
    #     cur.close()
    #     conn.close()
    #     bot.send_message(message.chat.id, "–ì—Ä—É–¥–Ω—ã–µ –∑–Ω–∞—á–∏—Ç —â—è –∑–∞–ø–∏—à–µ–º")
    #     bot.send_message(message.chat.id, "–°–∫–æ–∫ –∂–º–µ—à—å –≤ –∂–∏–º–µ? –•–æ—Ç—å 100-–∫–∞ –µ—Å—Ç—å?")
    #     bot.register_next_step_handler(message, bench)
def process_bench(message):
    global bench
    bench = message.text.strip()
    bot.send_message(message.chat.id, "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —è –±–æ–ª—å—à–µ –∂–º—É:3 –õ–∞–Ω –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π –≥—Ä—É–¥—å?")
    bot.register_next_step_handler(message, process_upper_bench)

def process_upper_bench(message):
    global upper_bench
    upper_bench = message.text.strip()
    bot.send_message(message.chat.id, "WOW! –ê –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –ö—Ä–æ—Å—Å–∞?")
    bot.register_next_step_handler(message, process_cross)

def process_cross(message):
    global cross
    cross = message.text.strip()
    bot.send_message(message.chat.id, "–ù–∞–¥–æ –ø–æ —Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ! –ò –Ω–∞–∫–æ–Ω–µ—Ü —Å–∫–æ–∫ –Ω–∞ –±–∞–±–æ—á–∫–µ, –º–æ–Ω—Å—Ç—Ä?")
    bot.register_next_step_handler(message, process_butterfly)

def process_butterfly(message):
    butterfly = message.text.strip()
    conn = sqlite3.connect("pr_sql.db")
    cur = conn.cursor()
    cur.execute(f"INSERT INTO chest(bench, upper, cross, butterfly) VALUES('%s', '%s', '%s', '%s') " %(bench, upper_bench, cross, butterfly))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–ü—Ä–Ω—è–ª –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª.–•–æ—Ä–æ—à–æ –ø–æ—Å—Ç–∞—Ä–∞–ª—Å—è –∂–¥—É –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /start –∏ —á–µ–∫–Ω–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–µ —É–º–µ—éüòè")


bot.polling(none_stop = True)

def reminder(message):
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç–∏–∫ –∫–∞—á–∫–∞–∑–∞–≤—Ä!–•–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ, —á—Ç–æ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω—å–∫–∞:3)")

schedule.every().monday.at("00:15").do(reminder)

while True:
    schedule.run_pending()
    time.sleep(1)